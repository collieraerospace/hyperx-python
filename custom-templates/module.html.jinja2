{% extends "default/module.html.jinja2" %}

{% macro nav_members(members) %}
    <ul class="memberlist">
        {% for m in members if is_public(m) | trim %}
            <li>
                {% if m.kind == "class" %}
                    <details>
                        <summary>{{ m.qualname }}</summary>
                    <i><a class="class" href="#{{ m.qualname }}">{{ m.qualname }}</a></i>
                    {% if m.own_members %}
                        {{ nav_members(m.own_members) | indent(12) }}
                    {% endif %}
                    </details>
                {% elif m.kind == "module" %}
                    <a class="module" href="#{{ m.name }}">{{ m.name }}</a>
                {% elif m.name == "__init__" %}
                    <a class="function" href="#{{ m.qualname }}">{{ m.qualname.split(".")[-2] }}</a>
                {% else %}
                    <a class="{{ m.kind }}" href="#{{ m.qualname }}">{{ m.name }}</a>
                {% endif %}
            </li>
        {% endfor %}
    </ul>
{% endmacro %}

{% macro docstring(var) %}
    {# Ignore the Enum, ABC, and Generic docstrings, if a class is an enum and doesn't have its own documentation
    (bit of a hack - "Color.RED" is just some text that is in that docstring which I don't think we'd ever use in practice) #}
    {% if var.docstring and "Color.RED" not in var.docstring and "Helper class that provides a standard way to create an ABC" not in var.docstring
    and "Abstract base class for generic types" not in var.docstring %} 
        <div class="docstring">{{ var.docstring | to_markdown | to_html | linkify(namespace=var.qualname) }}</div>
    {% endif %}
{% endmacro %}

{# TODO in future: possibly use Namespace.obj.__subclasses__() to also print out classes which inherit from the given one? #}